## 并发和并行
并发：多个事件在同一时间间隔发生
并行：多个事件在同一时间发生

## 进程、线程、协程
进程：
- 分配系统资源（cpu时间、内存等）基本单位
- 有独立的内存空间，切换开销大

线程：进程的一个执行流，是CPU调度并能独立运行的基本单位
- 同一进程中的多线程共享内存空间，线程切换代价小
- 多线程通信方便
- 从内核层面来看线程其实也是一种特殊的进程，它跟父进程共享了打开的文件和文件系统信息，共享了地址空间和信号处理函数

协程：
- go语言中的轻量级线程实现
- golang在runtime、系统调用等多方面对 goroutine 调度进行了封装和处理，当遇到长时间执行或者进行系统调用时，
会主动把当前goroutine CPU转让出去，让其它goroutine能被调度并执行，也就是golang从语言层面支持了协程


## 线程切换开销
- 线程本质上只是一批共享资源的进程，线程切换本质上依然需要内核进行进程切换
- 一组线程因为共享内存资源，因此一个进程的所有线程共享虚拟地址空间，线程切换相比进程切换，主要节省了虚拟地址空间的切换


## CSP communicating sequential process
- CSP 描述两个独立的并发实体通过共享的通讯channel进行通信的并发模型

## Context


## GMP



